test_run = require('test_run').new()
---
...
REPLICASET_1 = { 'fullbox_1_a', 'fullbox_1_b' }
---
...
REPLICASET_2 = { 'fullbox_2_a', 'fullbox_2_b' }
---
...
REPLICASET_3 = { 'fullbox_3_a', 'fullbox_3_b' }
---
...
REPLICASET_4 = { 'fullbox_4_a', 'fullbox_4_b' }
---
...
test_run:create_cluster(REPLICASET_1, 'rebalancer')
---
...
test_run:create_cluster(REPLICASET_2, 'rebalancer')
---
...
test_run:create_cluster(REPLICASET_3, 'rebalancer')
---
...
test_run:create_cluster(REPLICASET_4, 'rebalancer')
---
...
util = require('lua_libs.util')
---
...
util.wait_master(test_run, REPLICASET_1, 'fullbox_1_a')
---
...
util.wait_master(test_run, REPLICASET_2, 'fullbox_2_a')
---
...
util.wait_master(test_run, REPLICASET_3, 'fullbox_3_a')
---
...
util.wait_master(test_run, REPLICASET_4, 'fullbox_4_a')
---
...
test_run:cmd('create server router_1 with script="rebalancer/router_1.lua"')
---
- true
...
test_run:cmd('start server router_1')
---
- true
...
test_run:switch('router_1')
---
- true
...
add_replicaset()
---
...
add_second_replicaset()
---
...
vshard.router.cfg(cfg)
---
...
--
-- Test on the storages restarts during intensive loading and
-- rebalancing.
-- Fullbox_1_a - rebalancer, which holds all buckets at the
-- beginning. Router sends read-write requests on all buckets.
-- Background fiber kills randomly selected servers (including
-- rebalancer). The goal of fullbox_1_a regardless of restarting
-- of all storages is to repair the balance.
--
test_run:switch('fullbox_1_a')
---
- true
...
vshard.storage.rebalancer_disable()
---
...
log = require('log')
---
...
log.info(string.rep('a', 1000))
---
...
for i = 1, 200 do box.space._bucket:replace({i, vshard.consts.BUCKET.ACTIVE}) end
---
...
test_run:switch('router_1')
---
- true
...
for i = 1, 4 do vshard.router.discovery_wakeup() end
---
...
util = require('rebalancer_utils')
---
...
util.start_loading()
---
...
fiber.sleep(2)
---
...
test_run:switch('default')
---
- true
...
fiber = require('fiber')
---
...
log = require('log')
---
...
stop_killing = false
---
...
is_rebalancer_down = false
---
...
is_rebalancer_locked = false
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
function background_killer()
    while not stop_killing do
        local down_servers = {}
        if math.random(10) % 3 == 0 and not is_rebalancer_locked then
            is_rebalancer_down = true
            test_run:cmd('stop server fullbox_1_a')
            table.insert(down_servers, 'fullbox_1_a')
        end
        if math.random(10) % 3 == 0 then
            test_run:cmd('stop server fullbox_2_a')
            table.insert(down_servers, 'fullbox_2_a')
        end
        if math.random(10) % 3 == 0 then
            test_run:cmd('stop server fullbox_3_a')
            table.insert(down_servers, 'fullbox_3_a')
        end
        if math.random(10) % 3 == 0 then
            test_run:cmd('stop server fullbox_4_a')
            table.insert(down_servers, 'fullbox_4_a')
        end
        fiber.sleep(0.8)
        for _, server in pairs(down_servers) do
            test_run:cmd('start server '..server)
        end
        is_rebalancer_down = false
    end
end;
---
...
test_run:eval('fullbox_1_a', 'vshard.storage.rebalancer_enable()');
---
- []
...
killer = fiber.create(background_killer);
---
...
is_balanced = false;
---
...
i = 0
repeat
    if not is_rebalancer_down then
        is_rebalancer_locked = true
        is_balanced = test_run:grep_log('fullbox_1_a', 'The cluster is '..
                                        'balanced ok') ~= nil
        if not is_balanced then
            test_run:eval('fullbox_1_a', 'vshard.storage.rebalancer_wakeup()')
        end
        is_rebalancer_locked = false
    end
    i = i + 1
    fiber.sleep(0.3)
until is_balanced;
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
stop_killing = true
---
...
while killer:status() ~= 'dead' do fiber.sleep(0.1) end
---
...
test_run:switch('router_1')
---
- true
...
-- Wait until all GC, recovery-discovery finish work.
start = fiber.time()
---
...
while vshard.router.info().bucket.available_rw ~= 200 do vshard.router.discovery_wakeup() fiber.sleep(0.1) end
---
...
fiber.sleep(10 - (fiber.time() - start))
---
...
info = vshard.router.info()
---
...
-- Do not show concrete timeouts. They are not stable.
test_run:cmd("setopt delimiter ';'")
---
- true
...
for _, rs in pairs(info.replicasets) do
    rs.replica.network_timeout = 'number'
end;
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
info
---
- replicasets:
    ffdfc117-5089-40a8-99f5-0aa914aa2275:
      replica: &0
        network_timeout: number
        status: available
        uri: storage@127.0.0.1:3305
        uuid: ad40a200-730e-401a-9400-30dbd96dedbd
      bucket:
        available_rw: 50
      uuid: ffdfc117-5089-40a8-99f5-0aa914aa2275
      master: *0
    3e9bdda9-ce19-4f9f-b630-116f5dbc7fef:
      replica: &1
        network_timeout: number
        status: available
        uri: storage@127.0.0.1:3307
        uuid: 535df17b-c325-466c-9320-77f1190c749c
      bucket:
        available_rw: 50
      uuid: 3e9bdda9-ce19-4f9f-b630-116f5dbc7fef
      master: *1
    739fe4fb-2850-4cde-9637-10150724c5eb:
      replica: &2
        network_timeout: number
        status: available
        uri: storage@127.0.0.1:3301
        uuid: 3e01062d-5c1b-4382-b14e-f80a517cb462
      bucket:
        available_rw: 50
      uuid: 739fe4fb-2850-4cde-9637-10150724c5eb
      master: *2
    832bbba0-9699-4aa1-907d-c7c7af61f5c9:
      replica: &3
        network_timeout: number
        status: available
        uri: storage@127.0.0.1:3303
        uuid: 7223fc89-1a0d-480b-a33e-a8d2b117b13d
      bucket:
        available_rw: 50
      uuid: 832bbba0-9699-4aa1-907d-c7c7af61f5c9
      master: *3
  bucket:
    unreachable: 0
    available_ro: 0
    unknown: 0
    available_rw: 200
  status: 0
  alerts: []
...
util.stop_loading()
---
...
util.check_loading_result()
---
- true
...
test_run:switch('fullbox_1_a')
---
- true
...
vshard.storage.info().bucket
---
- receiving: 0
  active: 50
  total: 50
  garbage: 0
  pinned: 0
  sending: 0
...
vshard.storage.internal.buckets_to_recovery
---
- []
...
check_consistency()
---
- true
...
test_run:switch('fullbox_2_a')
---
- true
...
vshard.storage.info().bucket
---
- receiving: 0
  active: 50
  total: 50
  garbage: 0
  pinned: 0
  sending: 0
...
vshard.storage.internal.buckets_to_recovery
---
- []
...
check_consistency()
---
- true
...
test_run:switch('fullbox_3_a')
---
- true
...
vshard.storage.info().bucket
---
- receiving: 0
  active: 50
  total: 50
  garbage: 0
  pinned: 0
  sending: 0
...
vshard.storage.internal.buckets_to_recovery
---
- []
...
check_consistency()
---
- true
...
test_run:switch('fullbox_4_a')
---
- true
...
vshard.storage.info().bucket
---
- receiving: 0
  active: 50
  total: 50
  garbage: 0
  pinned: 0
  sending: 0
...
vshard.storage.internal.buckets_to_recovery
---
- []
...
check_consistency()
---
- true
...
test_run:switch('default')
---
- true
...
test_run:cmd('stop server router_1')
---
- true
...
test_run:cmd('cleanup server router_1')
---
- true
...
test_run:drop_cluster(REPLICASET_4)
---
...
test_run:drop_cluster(REPLICASET_3)
---
...
test_run:drop_cluster(REPLICASET_2)
---
...
test_run:drop_cluster(REPLICASET_1)
---
...
