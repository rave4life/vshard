test_run = require('test_run').new()
---
...
REPLICASET_1 = { 'storage_1_a', 'storage_1_b' }
---
...
REPLICASET_2 = { 'storage_2_a', 'storage_2_b' }
---
...
test_run:create_cluster(REPLICASET_1, 'storage')
---
...
test_run:create_cluster(REPLICASET_2, 'storage')
---
...
util = require('util')
---
...
util.wait_master(test_run, REPLICASET_1, 'storage_1_a')
---
...
util.wait_master(test_run, REPLICASET_2, 'storage_2_a')
---
...
test_run:switch('storage_1_a')
---
- true
...
vshard.storage.rebalancer_disable()
---
...
vshard.storage.bucket_force_create(1)
---
- true
...
vshard.storage.bucket_force_create(2)
---
- true
...
vshard.storage.bucket_force_create(3)
---
- true
...
customer = box.space.customer
---
...
customer:replace{10, 1, 'user1'}
---
- [10, 1, 'user1']
...
customer:replace{11, 2, 'user2'}
---
- [11, 2, 'user2']
...
for i = 12, 1112 do customer:replace{i, 3, 'user'..tostring(i)} end
---
...
test_run:switch('storage_1_b')
---
- true
...
customer = box.space.customer
---
...
-- Wait for data.
fiber = require('fiber')
---
...
while customer:count() ~= 1103 do fiber.sleep(0.1) end
---
...
box.space._bucket:select{}
---
- - [1, 'active']
  - [2, 'active']
  - [3, 'active']
...
test_run:switch('storage_1_a')
---
- true
...
fiber = require('fiber')
---
...
box.space._bucket:replace{3, vshard.consts.BUCKET.SENT}
---
- [3, 'sent']
...
vshard.storage.bucket_force_drop(2)
---
- true
...
-- Wait until garbage collector deletes data and 'sent' bucket.
while box.space._bucket:get{3} ~= nil do fiber.sleep(0.1) end
---
...
customer:select{}
---
- - [10, 1, 'user1']
...
test_run:switch('storage_1_b')
---
- true
...
-- Ensure replica also has deleted garbage.
while box.space._bucket:get{3} ~= nil do fiber.sleep(0.1) end
---
...
customer:select{}
---
- - [10, 1, 'user1']
...
--
-- gh-77: garbage collection options and Lua garbage collection.
--
test_run:switch('storage_1_a')
---
- true
...
fiber = require('fiber')
---
...
lua_gc = require('vshard.lua_gc')
---
...
cfg.collect_lua_garbage = true
---
...
vshard.storage.cfg(cfg, names.storage_1_a)
---
...
lua_gc.internal.bg_fiber ~= nil
---
- true
...
iterations = lua_gc.internal.iterations
---
...
lua_gc.internal.bg_fiber:wakeup()
---
...
while lua_gc.internal.iterations < iterations + 1 do fiber.sleep(0.01) end
---
...
lua_gc.internal.interval = 0.001
---
...
cfg.collect_lua_garbage = false
---
...
vshard.storage.cfg(cfg, names.storage_1_a)
---
...
lua_gc.internal.bg_fiber == nil
---
- true
...
iterations = lua_gc.internal.iterations
---
...
fiber.sleep(0.01)
---
...
iterations == lua_gc.internal.iterations
---
- true
...
test_run:switch('default')
---
- true
...
test_run:drop_cluster(REPLICASET_2)
---
...
test_run:drop_cluster(REPLICASET_1)
---
...
