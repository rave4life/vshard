test_run = require('test_run').new()
---
...
test_run:cmd("push filter '.*/init.lua.*[0-9]+: ' to ''")
---
- true
...
netbox = require('net.box')
---
...
fiber = require('fiber')
---
...
REPLICASET_1 = { 'storage_1_a', 'storage_1_b' }
---
...
REPLICASET_2 = { 'storage_2_a', 'storage_2_b' }
---
...
test_run:create_cluster(REPLICASET_1, 'router')
---
...
test_run:create_cluster(REPLICASET_2, 'router')
---
...
util = require('util')
---
...
util.wait_master(test_run, REPLICASET_1, 'storage_1_a')
---
...
util.wait_master(test_run, REPLICASET_2, 'storage_2_a')
---
...
test_run:cmd("create server router_1 with script='router/router_1.lua'")
---
- true
...
test_run:cmd("start server router_1")
---
- true
...
replicaset1_uuid = test_run:eval('storage_1_a', 'box.info.cluster.uuid')[1]
---
...
replicaset2_uuid = test_run:eval('storage_2_a', 'box.info.cluster.uuid')[1]
---
...
test_run:cmd("push filter '"..replicaset1_uuid.."' to '<replicaset_1>'")
---
- true
...
test_run:cmd("push filter '"..replicaset2_uuid.."' to '<replicaset_2>'")
---
- true
...
_ = test_run:cmd("switch router_1")
---
...
-- gh-46: Ensure a cfg is not destroyed after router.cfg().
cfg.sharding ~= nil
---
- true
...
util = require('util')
---
...
-- gh-24: log all connnect/disconnect events.
test_run:grep_log('router_1', 'connected to ')
---
- 'connected to '
...
rs1 = vshard.router.internal.replicasets[replicasets[1]]
---
...
rs2 = vshard.router.internal.replicasets[replicasets[2]]
---
...
fiber = require('fiber')
---
...
while not rs1.replica or not rs2.replica do fiber.sleep(0.1) end
---
...
-- With no zones the nearest server is master.
rs1.replica == rs1.master
---
- true
...
rs2.replica == rs2.master
---
- true
...
--
-- Part of gh-76: on reconfiguration do not recreate connections
-- to replicas, that are kept in a new configuration.
--
old_replicasets = vshard.router.internal.replicasets
---
...
old_connections = {}
---
...
connection_count = 0
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
for _, old_rs in pairs(old_replicasets) do
    for uuid, old_replica in pairs(old_rs.replicas) do
        old_connections[uuid] = old_replica.conn
        connection_count = connection_count + 1
    end
end;
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
connection_count == 4
---
- true
...
vshard.router.cfg(cfg)
---
...
new_replicasets = vshard.router.internal.replicasets
---
...
old_replicasets ~= new_replicasets
---
- true
...
rs1 = vshard.router.internal.replicasets[replicasets[1]]
---
...
rs2 = vshard.router.internal.replicasets[replicasets[2]]
---
...
while not rs1.replica or not rs2.replica do fiber.sleep(0.1) end
---
...
vshard.router.discovery_wakeup()
---
...
-- Check that netbox connections are the same.
test_run:cmd("setopt delimiter ';'")
---
- true
...
for _, new_rs in pairs(new_replicasets) do
    for uuid, new_replica in pairs(new_rs.replicas) do
        assert(old_connections[uuid] == new_replica.conn)
    end
end;
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
--
-- bucket_id and bucket_count
--
util.check_error(vshard.router.bucket_id) -- invalid arguments
---
- 'Usage: vshard.router.bucket_id(key)'
...
vshard.router.bucket_id(1)
---
- 477
...
vshard.router.bucket_id(2)
---
- 401
...
vshard.router.bucket_id({2})
---
- 401
...
vshard.router.bucket_id('2')
---
- 401
...
vshard.router.bucket_count()
---
- 3000
...
--
-- Initial distribution
--
util.check_error(vshard.router.call, 1, 'read', 'echo', {123})
---
- null
- bucket_id: 1
  code: 9
  type: ShardingError
  message: Bucket 1 cannot be found. Is rebalancing in progress?
  name: NO_ROUTE_TO_BUCKET
...
replicaset, err = vshard.router.bucket_discovery(1); return err == nil or err
---
- bucket_id: 1
  code: 9
  type: ShardingError
  message: Bucket 1 cannot be found. Is rebalancing in progress?
  name: NO_ROUTE_TO_BUCKET
...
vshard.router.bootstrap()
---
- true
...
-- Second one should produce error
vshard.router.bootstrap()
---
- null
- type: ShardingError
  name: NON_EMPTY
  message: Cluster is already bootstrapped
  code: 10
...
--
-- gh-108: negative bucket count on discovery.
--
vshard.router.internal.route_map = {}
---
...
rets = {}
---
...
function do_echo() table.insert(rets, vshard.router.callro(1, 'echo', {1})) end
---
...
f1 = fiber.create(do_echo) f2 = fiber.create(do_echo)
---
...
while f1:status() ~= 'dead' and f2:status() ~= 'dead' do fiber.sleep(0.01) end
---
...
vshard.router.info()
---
- replicasets:
    <replicaset_2>:
      replica: &0
        network_timeout: 0.5
        status: available
        uri: storage@127.0.0.1:3303
        uuid: 1e02ae8a-afc0-4e91-ba34-843a356b8ed7
      bucket:
        available_rw: 1
      uuid: <replicaset_2>
      master: *0
    <replicaset_1>:
      replica: &1
        network_timeout: 0.5
        status: available
        uri: storage@127.0.0.1:3301
        uuid: 8a274925-a26d-47fc-9e1b-af88ce939412
      bucket:
        available_rw: 0
      uuid: <replicaset_1>
      master: *1
  bucket:
    unreachable: 0
    available_ro: 0
    unknown: 2999
    available_rw: 1
  status: 1
  alerts:
  - ['UNKNOWN_BUCKETS', '2999 buckets are not discovered']
...
rets
---
- - 1
  - 1
...
rs1.bucket_count
---
- 0
...
rs2.bucket_count
---
- 1
...
--
-- Test lua errors.
--
_, e = vshard.router.callro(1, 'raise_client_error', {}, {})
---
...
e.trace = nil
---
...
e
---
- type: ClientError
  code: 32
  message: Unknown error
...
--
-- gh-48: more precise error messages about bucket unavailability.
--
util.check_error(vshard.router.call, vshard.consts.DEFAULT_BUCKET_COUNT + 1, 'read', 'echo', {123})
---
- 'Bucket is unreachable: bucket id is out of range'
...
util.check_error(vshard.router.call, -1, 'read', 'echo', {123})
---
- 'Bucket is unreachable: bucket id is out of range'
...
util.check_error(vshard.router.call, 0, 'read', 'echo', {123})
---
- 'Bucket is unreachable: bucket id is out of range'
...
replicaset, err = vshard.router.bucket_discovery(0); return err == nil or err
---
- bucket_id: 0
  code: 9
  type: ShardingError
  message: Bucket 0 cannot be found. Is rebalancing in progress?
  name: NO_ROUTE_TO_BUCKET
...
replicaset, err = vshard.router.bucket_discovery(1); return err == nil or err
---
- true
...
replicaset, err = vshard.router.bucket_discovery(2); return err == nil or err
---
- true
...
test_run:cmd('switch storage_2_a')
---
- true
...
box.space._bucket:replace({1, vshard.consts.BUCKET.SENDING, '<replicaset_1>'})
---
- [1, 'sending', '<replicaset_1>']
...
test_run:cmd('switch storage_1_a')
---
- true
...
box.space._bucket:replace({1, vshard.consts.BUCKET.RECEIVING, '<replicaset_2>'})
---
- [1, 'receiving', '<replicaset_2>']
...
test_run:cmd('switch router_1')
---
- true
...
-- Ok to read sending bucket.
vshard.router.call(1, 'read', 'echo', {123})
---
- 123
...
-- Not ok to write sending bucket.
util.check_error(vshard.router.call, 1, 'write', 'echo', {123})
---
- null
- {'bucket_id': 1, 'code': 7, 'type': 'ShardingError', 'destination': '<replicaset_1>',
  'name': 'TRANSFER_IS_IN_PROGRESS', 'message': 'Bucket 1 is transferring to replicaset
    <replicaset_1>'}
...
test_run:cmd('switch storage_2_a')
---
- true
...
box.space._bucket:replace({1, vshard.consts.BUCKET.ACTIVE})
---
- [1, 'active']
...
test_run:cmd('switch storage_1_a')
---
- true
...
box.space._bucket:delete({1})
---
- [1, 'receiving', '<replicaset_2>']
...
test_run:cmd('switch router_1')
---
- true
...
-- Check unavailability of master of a replicaset.
_ = vshard.router.bucket_discovery(2)
---
...
_ = vshard.router.bucket_discovery(3)
---
...
vshard.router.buckets_info(0, 3)
---
- - status: unknown
  - uuid: <replicaset_2>
    status: available_rw
  - uuid: <replicaset_2>
    status: available_rw
...
test_run:cmd('stop server storage_2_a')
---
- true
...
util.check_error(vshard.router.call, 1, 'read', 'echo', {123})
---
- null
- bucket_id: 1
  code: 8
  unreachable_uuid: <replicaset_2>
  name: UNREACHABLE_REPLICASET
  message: There is no active replicas in replicaset <replicaset_2>
  type: ShardingError
...
vshard.router.buckets_info(0, 3)
---
- - status: unknown
  - uuid: <replicaset_2>
    status: unreachable
  - uuid: <replicaset_2>
    status: unreachable
...
test_run:cmd('start server storage_2_a')
---
- true
...
--
-- gh-26: API to get netbox by bucket identifier.
--
vshard.router.route(vshard.consts.DEFAULT_BUCKET_COUNT + 100)
---
- null
- bucket_id: 3100
  code: 9
  type: ShardingError
  message: Bucket 3100 cannot be found. Is rebalancing in progress?
  name: NO_ROUTE_TO_BUCKET
...
util.check_error(vshard.router.route, 'asdfg')
---
- 'Usage: router.route(bucket_id)'
...
util.check_error(vshard.router.route)
---
- 'Usage: router.route(bucket_id)'
...
conn = vshard.router.route(1).master.conn
---
...
conn.state
---
- active
...
-- Test missing master.
rs_uuid = '<replicaset_2>'
---
...
rs = vshard.router.internal.replicasets[rs_uuid]
---
...
master = rs.master
---
...
rs.master = nil
---
...
vshard.router.route(1).master
---
- null
...
rs.master = master
---
...
-- Test reconnect on bucker_route().
master.conn:close()
---
...
conn = vshard.router.route(1):connect()
---
...
conn:wait_connected()
---
- true
...
conn.state
---
- active
...
--
-- gh-44: API to get connections to all replicasets.
--
map = vshard.router.routeall()
---
...
uuids = {}
---
...
for uuid, _ in pairs(map) do table.insert(uuids, uuid) end
---
...
uuids
---
- - <replicaset_2>
  - <replicaset_1>
...
--
-- Function call
--
bucket_id = 1
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
customer = {
    customer_id = 1,
    name = "Customer 1",
    bucket_id = bucket_id,
    accounts = {
        {
            account_id = 10,
            name = "Credit Card",
            balance = 100,
        },
        {
            account_id = 11,
            name = "Debit Card",
            balance = 50,
        },
    }
}
test_run:cmd("setopt delimiter ''");
---
...
--
-- gh-69: aliases for router.call - callro and callrw.
--
vshard.router.callrw(bucket_id, 'customer_add', {customer})
---
- true
...
vshard.router.callro(bucket_id, 'customer_lookup', {1})
---
- {'accounts': [{'account_id': 10, 'balance': 0, 'name': 'Credit Card'}, {'account_id': 11,
      'balance': 0, 'name': 'Debit Card'}], 'customer_id': 1, 'name': 'Customer 1'}
...
vshard.router.callro(bucket_id + 1500, 'customer_lookup', {1}) -- nothing
---
- null
...
--
-- Test errors from router call.
--
new_bid = vshard.consts.DEFAULT_BUCKET_COUNT + 1
---
...
space_data = {{1000, {{1}, {2}}}}
---
...
-- Insert in a not existing space - it must return box.error.
vshard.router.call(bucket_id, 'write', 'vshard.storage.bucket_recv', {new_bid, 'from_uuid', space_data})
---
- null
- {'type': 'ClientError', 'message': 'Space ''1000'' does not exist', 'code': 36,
  'trace': [{'file': '[C]', 'line': 4294967295}]}
...
--
-- Monitoring
--
-- All is ok, when all servers are up.
-- gh-103: show bucket info for each replicaset.
vshard.router.info()
---
- replicasets:
    <replicaset_2>:
      replica: &0
        network_timeout: 0.5
        status: available
        uri: storage@127.0.0.1:3303
        uuid: 1e02ae8a-afc0-4e91-ba34-843a356b8ed7
      bucket:
        available_rw: 3
      uuid: <replicaset_2>
      master: *0
    <replicaset_1>:
      replica: &1
        network_timeout: 0.5
        status: available
        uri: storage@127.0.0.1:3301
        uuid: 8a274925-a26d-47fc-9e1b-af88ce939412
      bucket:
        available_rw: 1
      uuid: <replicaset_1>
      master: *1
  bucket:
    unreachable: 0
    available_ro: 0
    unknown: 2996
    available_rw: 4
  status: 1
  alerts:
  - ['UNKNOWN_BUCKETS', '2996 buckets are not discovered']
...
-- Remove replica and master connections to trigger alert
-- UNREACHABLE_REPLICASET.
rs = vshard.router.internal.replicasets[replicasets[1]]
---
...
master_conn = rs.master.conn
---
...
replica_conn = rs.replica.conn
---
...
rs.master.conn = nil
---
...
rs.replica.conn = nil
---
...
info = vshard.router.info()
---
...
info.replicasets[rs.uuid]
---
- replica: &0
    network_timeout: 0.5
    status: unreachable
    uri: storage@127.0.0.1:3301
    uuid: 8a274925-a26d-47fc-9e1b-af88ce939412
  bucket:
    unreachable: 1
  uuid: <replicaset_1>
  master: *0
...
info.status
---
- 3
...
info.alerts
---
- - ['UNREACHABLE_MASTER', 'Master of replicaset <replicaset_1>
      is unreachable: disconnected']
  - ['UNREACHABLE_REPLICASET', 'There is no active replicas in replicaset <replicaset_1>']
  - ['UNKNOWN_BUCKETS', '2996 buckets are not discovered']
...
rs.master.conn = master_conn
---
...
rs.replica.conn = replica_conn
---
...
-- Trigger alert MISSING_MASTER by manual removal of master.
master = rs.master
---
...
rs.master = nil
---
...
info = vshard.router.info()
---
...
info.replicasets[rs.uuid]
---
- replica:
    network_timeout: 0.5
    status: available
    uri: storage@127.0.0.1:3301
    uuid: 8a274925-a26d-47fc-9e1b-af88ce939412
  bucket:
    available_ro: 1
  uuid: <replicaset_1>
  master:
    status: missing
...
info.status
---
- 2
...
info.alerts
---
- - ['MISSING_MASTER', 'Master is not configured for replicaset <replicaset_1>']
  - ['UNKNOWN_BUCKETS', '2996 buckets are not discovered']
...
rs.master = master
---
...
buckets_info = vshard.router.buckets_info()
---
...
#buckets_info
---
- 3000
...
buckets_info[1]
---
- uuid: <replicaset_2>
  status: available_rw
...
buckets_info[1501]
---
- uuid: <replicaset_1>
  status: available_rw
...
vshard.router.buckets_info(0, 3)
---
- - uuid: <replicaset_2>
    status: available_rw
  - uuid: <replicaset_2>
    status: available_rw
  - uuid: <replicaset_2>
    status: available_rw
...
vshard.router.buckets_info(1500, 3)
---
- 1502:
    status: unknown
  1503:
    status: unknown
  1501:
    uuid: <replicaset_1>
    status: available_rw
...
vshard.router.buckets_info(vshard.consts.DEFAULT_BUCKET_COUNT - 3)
---
- 3000:
    status: unknown
  2998:
    status: unknown
  2999:
    status: unknown
...
util.check_error(vshard.router.buckets_info, '123')
---
- 'Usage: buckets_info(offset, limit)'
...
util.check_error(vshard.router.buckets_info, 123, '456')
---
- 'Usage: buckets_info(offset, limit)'
...
--
-- gh-51: discovery fiber.
--
test_run:cmd("setopt delimiter ';'")
---
- true
...
function calculate_known_buckets()
    local known_buckets = 0
    for _, rs in pairs(vshard.router.internal.route_map) do
        known_buckets = known_buckets + 1
    end
    return known_buckets
end;
---
...
function wait_discovery()
    local known_buckets = 0
    while known_buckets ~= vshard.consts.DEFAULT_BUCKET_COUNT do
        vshard.router.discovery_wakeup()
        fiber.sleep(0.1)
        known_buckets = calculate_known_buckets()
    end
end;
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
-- Pin some buckets to ensure, that pinned buckets are discovered
-- too.
test_run:switch('storage_1_a')
---
- true
...
first_active = box.space._bucket.index.status:select({vshard.consts.BUCKET.ACTIVE}, {limit = 1})[1].id
---
...
vshard.storage.bucket_pin(first_active)
---
- true
...
test_run:switch('storage_2_a')
---
- true
...
first_active = box.space._bucket.index.status:select({vshard.consts.BUCKET.ACTIVE}, {limit = 1})[1].id
---
...
vshard.storage.bucket_pin(first_active)
---
- true
...
test_run:switch('router_1')
---
- true
...
wait_discovery()
---
...
calculate_known_buckets()
---
- 3000
...
test_run:grep_log('router_1', 'was 1, became 1500')
---
- was 1, became 1500
...
info = vshard.router.info()
---
...
info.bucket
---
- unreachable: 0
  available_ro: 0
  unknown: 0
  available_rw: 3000
...
info.alerts
---
- []
...
test_run:switch('storage_1_a')
---
- true
...
vshard.storage.bucket_unpin(first_active)
---
- true
...
test_run:switch('storage_2_a')
---
- true
...
vshard.storage.bucket_unpin(first_active)
---
- true
...
test_run:switch('router_1')
---
- true
...
--
-- Ensure the discovery procedure works continuously.
--
test_run:cmd("setopt delimiter ';'")
---
- true
...
for i = 1, 100 do
    local rs = vshard.router.internal.route_map[i]
    assert(rs)
    rs.bucket_count = rs.bucket_count - 1
    vshard.router.internal.route_map[i] = nil
end;
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
calculate_known_buckets()
---
- 2900
...
info = vshard.router.info()
---
...
info.bucket
---
- unreachable: 0
  available_ro: 0
  unknown: 100
  available_rw: 2900
...
info.alerts
---
- - ['UNKNOWN_BUCKETS', '100 buckets are not discovered']
...
wait_discovery()
---
...
calculate_known_buckets()
---
- 3000
...
test_run:grep_log('router_1', 'was 1400, became 1500')
---
- was 1400, became 1500
...
info = vshard.router.info()
---
...
info.bucket
---
- unreachable: 0
  available_ro: 0
  unknown: 0
  available_rw: 3000
...
info.alerts
---
- []
...
--
-- Configuration: inconsistency master=true on storage and routers
--
-- This test case flips masters in replicasets without changing
-- configuration on router and tests NON_MASTER response
--
-- Test the WRITE request
vshard.router.call(1, 'write', 'echo', { 'hello world' })
---
- hello world
...
-- Shuffle masters
util.shuffle_masters(cfg)
---
...
-- Reconfigure storages
test_run:cmd("switch storage_1_a")
---
- true
...
cfg.sharding = test_run:eval('router_1', 'return cfg.sharding')[1]
---
...
vshard.storage.cfg(cfg, names['storage_1_a'])
---
...
test_run:cmd("switch storage_1_b")
---
- true
...
cfg.sharding = test_run:eval('router_1', 'return cfg.sharding')[1]
---
...
vshard.storage.cfg(cfg, names['storage_1_b'])
---
...
test_run:cmd("switch storage_2_a")
---
- true
...
cfg.sharding = test_run:eval('router_1', 'return cfg.sharding')[1]
---
...
vshard.storage.cfg(cfg, names['storage_2_a'])
---
...
test_run:cmd("switch storage_2_b")
---
- true
...
cfg.sharding = test_run:eval('router_1', 'return cfg.sharding')[1]
---
...
vshard.storage.cfg(cfg, names['storage_2_b'])
---
...
-- Test that the WRITE request doesn't work
test_run:cmd("switch router_1")
---
- true
...
util.check_error(vshard.router.call, 1, 'write', 'echo', { 'hello world' })
---
- null
- {'replica_uuid': '1e02ae8a-afc0-4e91-ba34-843a356b8ed7', 'replicaset_uuid': '<replicaset_2>',
  'type': 'ShardingError', 'message': 'Replica 1e02ae8a-afc0-4e91-ba34-843a356b8ed7
    is not a master for replicaset <replicaset_2> anymore',
  'name': 'NON_MASTER', 'code': 2}
...
-- Reconfigure router and test that the WRITE request does work
vshard.router.cfg(cfg)
---
...
vshard.router.call(1, 'write', 'echo', { 'hello world' })
---
- hello world
...
-- Sync API
vshard.router.sync()
---
...
util.check_error(vshard.router.sync, "xxx")
---
- 'Usage: vshard.router.sync([timeout: number])'
...
vshard.router.sync(100500)
---
...
--
-- gh-81: Check that user passed self arg.
-- This check ensures that in case a vshard user called an
-- object method like this: object.method() instead of
-- object:method(), an appropriate help-error returns.
--
_, replicaset = next(vshard.router.internal.replicasets)
---
...
error_messages = {}
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
for _, func in pairs(getmetatable(replicaset).__index) do
    local ok, msg = pcall(func, "arg_of_wrong_type")
    table.insert(error_messages, msg:match("Use .*"))
end;
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
error_messages
---
- - Use replicaset:callro(...) instead of replicaset.callro(...)
  - Use replicaset:connect_master(...) instead of replicaset.connect_master(...)
  - Use replicaset:connect_replica(...) instead of replicaset.connect_replica(...)
  - Use replicaset:rebind_connections(...) instead of replicaset.rebind_connections(...)
  - Use replicaset:down_replica_priority(...) instead of replicaset.down_replica_priority(...)
  - Use replicaset:call(...) instead of replicaset.call(...)
  - Use replicaset:up_replica_priority(...) instead of replicaset.up_replica_priority(...)
  - Use replicaset:connect(...) instead of replicaset.connect(...)
  - Use replicaset:callrw(...) instead of replicaset.callrw(...)
  - Use replicaset:connect_all(...) instead of replicaset.connect_all(...)
...
_, replica = next(replicaset.replicas)
---
...
error_messages = {}
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
for _, func in pairs(getmetatable(replica).__index) do
    local ok, msg = pcall(func, "arg_of_wrong_type")
    table.insert(error_messages, msg:match("Use .*"))
end;
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
error_messages
---
- - Use replica:is_connected(...) instead of replica.is_connected(...)
  - Use replica:safe_uri(...) instead of replica.safe_uri(...)
...
--
-- gh-117: Preserve route_map on router.cfg.
--
bucket_to_old_rs = {}
---
...
bucket_cnt = 0
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
for bucket, rs in pairs(vshard.router.internal.route_map) do
    bucket_to_old_rs[bucket] = rs
    bucket_cnt = bucket_cnt + 1
end;
---
...
bucket_cnt;
---
- 3000
...
vshard.router.cfg(cfg);
---
...
for bucket, old_rs in pairs(bucket_to_old_rs) do
    local old_uuid = old_rs.uuid
    local rs = vshard.router.internal.route_map[bucket]
    if not rs or not old_uuid == rs.uuid then
        error("Bucket lost during reconfigure.")
    end
    if rs == old_rs then
        error("route_map was not updataed.")
    end
end;
---
...
--
-- Check route_map is not filled with old replica objects after
-- reconfigure.
--
-- Simulate long `callro`.
vshard.router.internal.errinj.ERRINJ_LONG_DISCOVERY = true;
---
...
while vshard.router.internal.errinj.ERRINJ_LONG_DISCOVERY ~= 'waiting' do
    vshard.router.discovery_wakeup()
    fiber.sleep(0.02)
end;
---
...
vshard.router.cfg(cfg);
---
...
vshard.router.internal.route_map = {};
---
...
vshard.router.internal.errinj.ERRINJ_LONG_DISCOVERY = false;
---
...
-- Do discovery iteration. Upload buckets from the
-- first replicaset.
while not next(vshard.router.internal.route_map) do
    vshard.router.discovery_wakeup()
    fiber.sleep(0.01)
end;
---
...
new_replicasets = {};
---
...
for _, rs in pairs(vshard.router.internal.replicasets) do
    new_replicasets[rs] = true
end;
---
...
_, rs = next(vshard.router.internal.route_map);
---
...
new_replicasets[rs] == true;
---
- true
...
test_run:cmd("setopt delimiter ''");
---
- true
...
-- gh-114: Check non-dynamic option change during reconfigure.
non_dynamic_cfg = table.copy(cfg)
---
...
non_dynamic_cfg.shard_index = 'non_default_name'
---
...
util.check_error(vshard.router.cfg, non_dynamic_cfg)
---
- Non-dynamic option shard_index cannot be reconfigured
...
-- Error during reconfigure process.
vshard.router.route(1):callro('echo', {'some_data'})
---
- some_data
- null
- null
...
vshard.router.internal.errinj.ERRINJ_CFG = true
---
...
old_internal = table.copy(vshard.router.internal)
---
...
util.check_error(vshard.router.cfg, cfg)
---
- 'Error injection: cfg'
...
vshard.router.internal.errinj.ERRINJ_CFG = false
---
...
util.has_same_fields(old_internal, vshard.router.internal)
---
- true
...
vshard.router.route(1):callro('echo', {'some_data'})
---
- some_data
- null
- null
...
_ = test_run:cmd("switch default")
---
...
test_run:drop_cluster(REPLICASET_2)
---
...
-- gh-24: log all connnect/disconnect events.
while test_run:grep_log('router_1', 'disconnected from ') == nil do fiber.sleep(0.1) end
---
...
test_run:cmd("stop server router_1")
---
- true
...
test_run:cmd("cleanup server router_1")
---
- true
...
test_run:drop_cluster(REPLICASET_1)
---
...
test_run:cmd('clear filter')
---
- true
...
